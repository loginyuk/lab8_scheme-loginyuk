
lab8_scheme-loginyuk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a38  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002bc0  08002bc0  00012bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf0  08002bf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf0  08002bf0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf0  08002bf0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf0  08002bf0  00012bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000003c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d0  200003d0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c9a1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e2c  00000000  00000000  0002ca20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b18  00000000  00000000  0002e850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000087e  00000000  00000000  0002f368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cb15  00000000  00000000  0002fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e68c  00000000  00000000  0004c6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ab103  00000000  00000000  0005ad87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002ddc  00000000  00000000  00105e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00108c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ba8 	.word	0x08002ba8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ba8 	.word	0x08002ba8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb2e 	bl	800082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80a 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f90a 	bl	80003ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f868 	bl	80002ac <MX_I2C1_Init>
  MX_SPI1_Init();
 80001dc:	f000 f8a6 	bl	800032c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001e0:	f000 f8e2 	bl	80003a8 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e4:	e7fe      	b.n	80001e4 <main+0x1c>
	...

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b09e      	sub	sp, #120	; 0x78
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f002 fca9 	bl	8002b4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	605a      	str	r2, [r3, #4]
 8000206:	609a      	str	r2, [r3, #8]
 8000208:	60da      	str	r2, [r3, #12]
 800020a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800020c:	463b      	mov	r3, r7
 800020e:	223c      	movs	r2, #60	; 0x3c
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fc9b 	bl	8002b4e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000218:	2303      	movs	r3, #3
 800021a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800021c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000220:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022a:	2310      	movs	r3, #16
 800022c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000236:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000238:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800023c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000242:	4618      	mov	r0, r3
 8000244:	f000 ffc8 	bl	80011d8 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800024e:	f000 f993 	bl	8000578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000262:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000268:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800026c:	2101      	movs	r1, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fff0 	bl	8002254 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800027a:	f000 f97d 	bl	8000578 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800027e:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <SystemClock_Config+0xc0>)
 8000280:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000282:	2300      	movs	r3, #0
 8000284:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000286:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800028a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028c:	463b      	mov	r3, r7
 800028e:	4618      	mov	r0, r3
 8000290:	f002 f9c6 	bl	8002620 <HAL_RCCEx_PeriphCLKConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800029a:	f000 f96d 	bl	8000578 <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3778      	adds	r7, #120	; 0x78
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	00020020 	.word	0x00020020

080002ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <MX_I2C1_Init+0x74>)
 80002b2:	4a1c      	ldr	r2, [pc, #112]	; (8000324 <MX_I2C1_Init+0x78>)
 80002b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002b6:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <MX_I2C1_Init+0x74>)
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <MX_I2C1_Init+0x7c>)
 80002ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <MX_I2C1_Init+0x74>)
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c2:	4b17      	ldr	r3, [pc, #92]	; (8000320 <MX_I2C1_Init+0x74>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c8:	4b15      	ldr	r3, [pc, #84]	; (8000320 <MX_I2C1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <MX_I2C1_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <MX_I2C1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_I2C1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_I2C1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002e6:	480e      	ldr	r0, [pc, #56]	; (8000320 <MX_I2C1_Init+0x74>)
 80002e8:	f000 fd7e 	bl	8000de8 <HAL_I2C_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002f2:	f000 f941 	bl	8000578 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002f6:	2100      	movs	r1, #0
 80002f8:	4809      	ldr	r0, [pc, #36]	; (8000320 <MX_I2C1_Init+0x74>)
 80002fa:	f000 fe04 	bl	8000f06 <HAL_I2CEx_ConfigAnalogFilter>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000304:	f000 f938 	bl	8000578 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000308:	2100      	movs	r1, #0
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_I2C1_Init+0x74>)
 800030c:	f000 fe46 	bl	8000f9c <HAL_I2CEx_ConfigDigitalFilter>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000316:	f000 f92f 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000028 	.word	0x20000028
 8000324:	40005400 	.word	0x40005400
 8000328:	2000090e 	.word	0x2000090e

0800032c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000332:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <MX_SPI1_Init+0x78>)
 8000334:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000338:	f44f 7282 	mov.w	r2, #260	; 0x104
 800033c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800033e:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000346:	f44f 7240 	mov.w	r2, #768	; 0x300
 800034a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_SPI1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_SPI1_Init+0x74>)
 800035a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800035e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000362:	2208      	movs	r2, #8
 8000364:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_SPI1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_SPI1_Init+0x74>)
 800037a:	2207      	movs	r2, #7
 800037c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_SPI1_Init+0x74>)
 8000386:	2208      	movs	r2, #8
 8000388:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_SPI1_Init+0x74>)
 800038c:	f002 faf8 	bl	8002980 <HAL_SPI_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000396:	f000 f8ef 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	2000007c 	.word	0x2000007c
 80003a4:	40013000 	.word	0x40013000

080003a8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80003ac:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <MX_USB_PCD_Init+0x3c>)
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <MX_USB_PCD_Init+0x40>)
 80003b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_USB_PCD_Init+0x3c>)
 80003b4:	2208      	movs	r2, #8
 80003b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80003b8:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <MX_USB_PCD_Init+0x3c>)
 80003ba:	2202      	movs	r2, #2
 80003bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_USB_PCD_Init+0x3c>)
 80003c0:	2202      	movs	r2, #2
 80003c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <MX_USB_PCD_Init+0x3c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_USB_PCD_Init+0x3c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80003d0:	4804      	ldr	r0, [pc, #16]	; (80003e4 <MX_USB_PCD_Init+0x3c>)
 80003d2:	f000 fe2f 	bl	8001034 <HAL_PCD_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80003dc:	f000 f8cc 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	200000e0 	.word	0x200000e0
 80003e8:	40005c00 	.word	0x40005c00

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08c      	sub	sp, #48	; 0x30
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 031c 	add.w	r3, r7, #28
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000402:	4b59      	ldr	r3, [pc, #356]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a58      	ldr	r2, [pc, #352]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b56      	ldr	r3, [pc, #344]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000416:	61bb      	str	r3, [r7, #24]
 8000418:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041a:	4b53      	ldr	r3, [pc, #332]	; (8000568 <MX_GPIO_Init+0x17c>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a52      	ldr	r2, [pc, #328]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b50      	ldr	r3, [pc, #320]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800042e:	617b      	str	r3, [r7, #20]
 8000430:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000432:	4b4d      	ldr	r3, [pc, #308]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a4c      	ldr	r2, [pc, #304]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b4a      	ldr	r3, [pc, #296]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000446:	613b      	str	r3, [r7, #16]
 8000448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044a:	4b47      	ldr	r3, [pc, #284]	; (8000568 <MX_GPIO_Init+0x17c>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a46      	ldr	r2, [pc, #280]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b44      	ldr	r3, [pc, #272]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000462:	4b41      	ldr	r3, [pc, #260]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a40      	ldr	r2, [pc, #256]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b3e      	ldr	r3, [pc, #248]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800047a:	4b3b      	ldr	r3, [pc, #236]	; (8000568 <MX_GPIO_Init+0x17c>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a3a      	ldr	r2, [pc, #232]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b38      	ldr	r3, [pc, #224]	; (8000568 <MX_GPIO_Init+0x17c>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000492:	2200      	movs	r2, #0
 8000494:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000498:	4834      	ldr	r0, [pc, #208]	; (800056c <MX_GPIO_Init+0x180>)
 800049a:	f000 fc8d 	bl	8000db8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a4:	4832      	ldr	r0, [pc, #200]	; (8000570 <MX_GPIO_Init+0x184>)
 80004a6:	f000 fc87 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80004b0:	4830      	ldr	r0, [pc, #192]	; (8000574 <MX_GPIO_Init+0x188>)
 80004b2:	f000 fc81 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80004b6:	2337      	movs	r3, #55	; 0x37
 80004b8:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004ba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80004be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004c4:	f107 031c 	add.w	r3, r7, #28
 80004c8:	4619      	mov	r1, r3
 80004ca:	4828      	ldr	r0, [pc, #160]	; (800056c <MX_GPIO_Init+0x180>)
 80004cc:	f000 fafa 	bl	8000ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004d0:	f64f 7308 	movw	r3, #65288	; 0xff08
 80004d4:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	2300      	movs	r3, #0
 80004e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	4619      	mov	r1, r3
 80004e8:	4820      	ldr	r0, [pc, #128]	; (800056c <MX_GPIO_Init+0x180>)
 80004ea:	f000 faeb 	bl	8000ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ee:	2301      	movs	r3, #1
 80004f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 031c 	add.w	r3, r7, #28
 80004fe:	4619      	mov	r1, r3
 8000500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000504:	f000 fade 	bl	8000ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800050c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050e:	2301      	movs	r3, #1
 8000510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000516:	2300      	movs	r3, #0
 8000518:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	4619      	mov	r1, r3
 8000520:	4813      	ldr	r0, [pc, #76]	; (8000570 <MX_GPIO_Init+0x184>)
 8000522:	f000 facf 	bl	8000ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000526:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800052a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052c:	2300      	movs	r3, #0
 800052e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000534:	f107 031c 	add.w	r3, r7, #28
 8000538:	4619      	mov	r1, r3
 800053a:	480d      	ldr	r0, [pc, #52]	; (8000570 <MX_GPIO_Init+0x184>)
 800053c:	f000 fac2 	bl	8000ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000540:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	2301      	movs	r3, #1
 8000548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2300      	movs	r3, #0
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	4619      	mov	r1, r3
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <MX_GPIO_Init+0x188>)
 800055a:	f000 fab3 	bl	8000ac4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800055e:	bf00      	nop
 8000560:	3730      	adds	r7, #48	; 0x30
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	48001000 	.word	0x48001000
 8000570:	48000400 	.word	0x48000400
 8000574:	48000c00 	.word	0x48000c00

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000580:	e7fe      	b.n	8000580 <Error_Handler+0x8>
	...

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <HAL_MspInit+0x44>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <HAL_MspInit+0x44>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HAL_MspInit+0x44>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_MspInit+0x44>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <HAL_MspInit+0x44>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_MspInit+0x44>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005ba:	2007      	movs	r0, #7
 80005bc:	f000 fa4e 	bl	8000a5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a17      	ldr	r2, [pc, #92]	; (8000648 <HAL_I2C_MspInit+0x7c>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d127      	bne.n	800063e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_I2C_MspInit+0x80>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a16      	ldr	r2, [pc, #88]	; (800064c <HAL_I2C_MspInit+0x80>)
 80005f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <HAL_I2C_MspInit+0x80>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000606:	23c0      	movs	r3, #192	; 0xc0
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800060a:	2312      	movs	r3, #18
 800060c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060e:	2301      	movs	r3, #1
 8000610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000612:	2303      	movs	r3, #3
 8000614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000616:	2304      	movs	r3, #4
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <HAL_I2C_MspInit+0x84>)
 8000622:	f000 fa4f 	bl	8000ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_I2C_MspInit+0x80>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_I2C_MspInit+0x80>)
 800062c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_I2C_MspInit+0x80>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	; 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40005400 	.word	0x40005400
 800064c:	40021000 	.word	0x40021000
 8000650:	48000400 	.word	0x48000400

08000654 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <HAL_SPI_MspInit+0x7c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d128      	bne.n	80006c8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <HAL_SPI_MspInit+0x80>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <HAL_SPI_MspInit+0x80>)
 800067c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000680:	6193      	str	r3, [r2, #24]
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <HAL_SPI_MspInit+0x80>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <HAL_SPI_MspInit+0x80>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <HAL_SPI_MspInit+0x80>)
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <HAL_SPI_MspInit+0x80>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80006a6:	23e0      	movs	r3, #224	; 0xe0
 80006a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006b6:	2305      	movs	r3, #5
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f000 f9fe 	bl	8000ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40013000 	.word	0x40013000
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a18      	ldr	r2, [pc, #96]	; (8000758 <HAL_PCD_MspInit+0x80>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d129      	bne.n	800074e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <HAL_PCD_MspInit+0x84>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <HAL_PCD_MspInit+0x84>)
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_PCD_MspInit+0x84>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000712:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000724:	230e      	movs	r3, #14
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000732:	f000 f9c7 	bl	8000ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_PCD_MspInit+0x84>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_PCD_MspInit+0x84>)
 800073c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_PCD_MspInit+0x84>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800074e:	bf00      	nop
 8000750:	3728      	adds	r7, #40	; 0x28
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40005c00 	.word	0x40005c00
 800075c:	40021000 	.word	0x40021000

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ac:	f000 f884 	bl	80008b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <SystemInit+0x20>)
 80007ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007be:	4a05      	ldr	r2, [pc, #20]	; (80007d4 <SystemInit+0x20>)
 80007c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000810 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007dc:	f7ff ffea 	bl	80007b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e2:	490d      	ldr	r1, [pc, #52]	; (8000818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <LoopForever+0xe>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e8:	e002      	b.n	80007f0 <LoopCopyDataInit>

080007ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ee:	3304      	adds	r3, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f4:	d3f9      	bcc.n	80007ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f8:	4c0a      	ldr	r4, [pc, #40]	; (8000824 <LoopForever+0x16>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007fc:	e001      	b.n	8000802 <LoopFillZerobss>

080007fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000800:	3204      	adds	r2, #4

08000802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000804:	d3fb      	bcc.n	80007fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000806:	f002 f9ab 	bl	8002b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800080a:	f7ff fcdd 	bl	80001c8 <main>

0800080e <LoopForever>:

LoopForever:
    b LoopForever
 800080e:	e7fe      	b.n	800080e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000810:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000818:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800081c:	08002bf8 	.word	0x08002bf8
  ldr r2, =_sbss
 8000820:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000824:	200003d0 	.word	0x200003d0

08000828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_2_IRQHandler>
	...

0800082c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_Init+0x28>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <HAL_Init+0x28>)
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800083c:	2003      	movs	r0, #3
 800083e:	f000 f90d 	bl	8000a5c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000842:	2000      	movs	r0, #0
 8000844:	f000 f808 	bl	8000858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000848:	f7ff fe9c 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40022000 	.word	0x40022000

08000858 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_InitTick+0x54>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_InitTick+0x58>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000872:	fbb2 f3f3 	udiv	r3, r2, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f917 	bl	8000aaa <HAL_SYSTICK_Config>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e00e      	b.n	80008a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b0f      	cmp	r3, #15
 800088a:	d80a      	bhi.n	80008a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088c:	2200      	movs	r2, #0
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000894:	f000 f8ed 	bl	8000a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000898:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <HAL_InitTick+0x5c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800089e:	2300      	movs	r3, #0
 80008a0:	e000      	b.n	80008a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000004 	.word	0x20000004

080008b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_IncTick+0x20>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_IncTick+0x24>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <HAL_IncTick+0x24>)
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000008 	.word	0x20000008
 80008dc:	200003cc 	.word	0x200003cc

080008e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <HAL_GetTick+0x14>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	200003cc 	.word	0x200003cc

080008f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000914:	4013      	ands	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	60d3      	str	r3, [r2, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <__NVIC_GetPriorityGrouping+0x18>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	f003 0307 	and.w	r3, r3, #7
}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db0a      	blt.n	8000986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	490c      	ldr	r1, [pc, #48]	; (80009a8 <__NVIC_SetPriority+0x4c>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	440b      	add	r3, r1
 8000980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000984:	e00a      	b.n	800099c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4908      	ldr	r1, [pc, #32]	; (80009ac <__NVIC_SetPriority+0x50>)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	3b04      	subs	r3, #4
 8000994:	0112      	lsls	r2, r2, #4
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	440b      	add	r3, r1
 800099a:	761a      	strb	r2, [r3, #24]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f1c3 0307 	rsb	r3, r3, #7
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	bf28      	it	cs
 80009ce:	2304      	movcs	r3, #4
 80009d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3304      	adds	r3, #4
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d902      	bls.n	80009e0 <NVIC_EncodePriority+0x30>
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3b03      	subs	r3, #3
 80009de:	e000      	b.n	80009e2 <NVIC_EncodePriority+0x32>
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43da      	mvns	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	43d9      	mvns	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	4313      	orrs	r3, r2
         );
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3724      	adds	r7, #36	; 0x24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a28:	d301      	bcc.n	8000a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00f      	b.n	8000a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <SysTick_Config+0x40>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a36:	210f      	movs	r1, #15
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a3c:	f7ff ff8e 	bl	800095c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <SysTick_Config+0x40>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SysTick_Config+0x40>)
 8000a48:	2207      	movs	r2, #7
 8000a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	e000e010 	.word	0xe000e010

08000a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff47 	bl	80008f8 <__NVIC_SetPriorityGrouping>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a84:	f7ff ff5c 	bl	8000940 <__NVIC_GetPriorityGrouping>
 8000a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	6978      	ldr	r0, [r7, #20]
 8000a90:	f7ff ff8e 	bl	80009b0 <NVIC_EncodePriority>
 8000a94:	4602      	mov	r2, r0
 8000a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff5d 	bl	800095c <__NVIC_SetPriority>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffb0 	bl	8000a18 <SysTick_Config>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad2:	e154      	b.n	8000d7e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 8146 	beq.w	8000d78 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d005      	beq.n	8000b04 <HAL_GPIO_Init+0x40>
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d130      	bne.n	8000b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	f003 0201 	and.w	r2, r3, #1
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d017      	beq.n	8000ba2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d123      	bne.n	8000bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	220f      	movs	r2, #15
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	08da      	lsrs	r2, r3, #3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3208      	adds	r2, #8
 8000bf0:	6939      	ldr	r1, [r7, #16]
 8000bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0203 	and.w	r2, r3, #3
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 80a0 	beq.w	8000d78 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c38:	4b58      	ldr	r3, [pc, #352]	; (8000d9c <HAL_GPIO_Init+0x2d8>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a57      	ldr	r2, [pc, #348]	; (8000d9c <HAL_GPIO_Init+0x2d8>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b55      	ldr	r3, [pc, #340]	; (8000d9c <HAL_GPIO_Init+0x2d8>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c50:	4a53      	ldr	r2, [pc, #332]	; (8000da0 <HAL_GPIO_Init+0x2dc>)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	3302      	adds	r3, #2
 8000c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	220f      	movs	r2, #15
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c7a:	d019      	beq.n	8000cb0 <HAL_GPIO_Init+0x1ec>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a49      	ldr	r2, [pc, #292]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d013      	beq.n	8000cac <HAL_GPIO_Init+0x1e8>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a48      	ldr	r2, [pc, #288]	; (8000da8 <HAL_GPIO_Init+0x2e4>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d00d      	beq.n	8000ca8 <HAL_GPIO_Init+0x1e4>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a47      	ldr	r2, [pc, #284]	; (8000dac <HAL_GPIO_Init+0x2e8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d007      	beq.n	8000ca4 <HAL_GPIO_Init+0x1e0>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a46      	ldr	r2, [pc, #280]	; (8000db0 <HAL_GPIO_Init+0x2ec>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d101      	bne.n	8000ca0 <HAL_GPIO_Init+0x1dc>
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	e008      	b.n	8000cb2 <HAL_GPIO_Init+0x1ee>
 8000ca0:	2305      	movs	r3, #5
 8000ca2:	e006      	b.n	8000cb2 <HAL_GPIO_Init+0x1ee>
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e004      	b.n	8000cb2 <HAL_GPIO_Init+0x1ee>
 8000ca8:	2302      	movs	r3, #2
 8000caa:	e002      	b.n	8000cb2 <HAL_GPIO_Init+0x1ee>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <HAL_GPIO_Init+0x1ee>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	f002 0203 	and.w	r2, r2, #3
 8000cb8:	0092      	lsls	r2, r2, #2
 8000cba:	4093      	lsls	r3, r2
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cc2:	4937      	ldr	r1, [pc, #220]	; (8000da0 <HAL_GPIO_Init+0x2dc>)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	3302      	adds	r3, #2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd0:	4b38      	ldr	r3, [pc, #224]	; (8000db4 <HAL_GPIO_Init+0x2f0>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cf4:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <HAL_GPIO_Init+0x2f0>)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <HAL_GPIO_Init+0x2f0>)
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d1e:	4a25      	ldr	r2, [pc, #148]	; (8000db4 <HAL_GPIO_Init+0x2f0>)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <HAL_GPIO_Init+0x2f0>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d48:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <HAL_GPIO_Init+0x2f0>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_GPIO_Init+0x2f0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_GPIO_Init+0x2f0>)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	fa22 f303 	lsr.w	r3, r2, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f47f aea3 	bne.w	8000ad4 <HAL_GPIO_Init+0x10>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	371c      	adds	r7, #28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000
 8000da4:	48000400 	.word	0x48000400
 8000da8:	48000800 	.word	0x48000800
 8000dac:	48000c00 	.word	0x48000c00
 8000db0:	48001000 	.word	0x48001000
 8000db4:	40010400 	.word	0x40010400

08000db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dc8:	787b      	ldrb	r3, [r7, #1]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dd4:	e002      	b.n	8000ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dd6:	887a      	ldrh	r2, [r7, #2]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e081      	b.n	8000efe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d106      	bne.n	8000e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff fbdc 	bl	80005cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2224      	movs	r2, #36	; 0x24
 8000e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0201 	bic.w	r2, r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d107      	bne.n	8000e62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	e006      	b.n	8000e70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d104      	bne.n	8000e82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ea4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691a      	ldr	r2, [r3, #16]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69d9      	ldr	r1, [r3, #28]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1a      	ldr	r2, [r3, #32]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0201 	orr.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2220      	movs	r2, #32
 8000eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b20      	cmp	r3, #32
 8000f1a:	d138      	bne.n	8000f8e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d101      	bne.n	8000f2a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f26:	2302      	movs	r3, #2
 8000f28:	e032      	b.n	8000f90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2224      	movs	r2, #36	; 0x24
 8000f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 0201 	bic.w	r2, r2, #1
 8000f48:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f58:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6819      	ldr	r1, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f042 0201 	orr.w	r2, r2, #1
 8000f78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f8e:	2302      	movs	r3, #2
  }
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b20      	cmp	r3, #32
 8000fb0:	d139      	bne.n	8001026 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e033      	b.n	8001028 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2224      	movs	r2, #36	; 0x24
 8000fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0201 	bic.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f042 0201 	orr.w	r2, r2, #1
 8001010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2220      	movs	r2, #32
 8001016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001026:	2302      	movs	r3, #2
  }
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001036:	b08b      	sub	sp, #44	; 0x2c
 8001038:	af06      	add	r7, sp, #24
 800103a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e0c4      	b.n	80011d0 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fb3c 	bl	80006d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2203      	movs	r2, #3
 8001064:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fd32 	bl	8002ad6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e040      	b.n	80010fa <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	440b      	add	r3, r1
 8001088:	3301      	adds	r3, #1
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	440b      	add	r3, r1
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	440b      	add	r3, r1
 80010b2:	3303      	adds	r3, #3
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	440b      	add	r3, r1
 80010c6:	3338      	adds	r3, #56	; 0x38
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	440b      	add	r3, r1
 80010da:	333c      	adds	r3, #60	; 0x3c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	440b      	add	r3, r1
 80010ee:	3340      	adds	r3, #64	; 0x40
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	3301      	adds	r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	d3b9      	bcc.n	8001078 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e044      	b.n	8001194 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	440b      	add	r3, r1
 8001118:	f203 1369 	addw	r3, r3, #361	; 0x169
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	440b      	add	r3, r1
 800115a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	440b      	add	r3, r1
 8001170:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	440b      	add	r3, r1
 8001186:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	3301      	adds	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	d3b5      	bcc.n	800110a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	687e      	ldr	r6, [r7, #4]
 80011a6:	466d      	mov	r5, sp
 80011a8:	f106 0410 	add.w	r4, r6, #16
 80011ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	602b      	str	r3, [r5, #0]
 80011b4:	1d33      	adds	r3, r6, #4
 80011b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b8:	6838      	ldr	r0, [r7, #0]
 80011ba:	f001 fca7 	bl	8002b0c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80011de:	af00      	add	r7, sp, #0
 80011e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f001 b823 	b.w	8002244 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 817d 	beq.w	800150e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001214:	4bbc      	ldr	r3, [pc, #752]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	2b04      	cmp	r3, #4
 800121e:	d00c      	beq.n	800123a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001220:	4bb9      	ldr	r3, [pc, #740]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 030c 	and.w	r3, r3, #12
 8001228:	2b08      	cmp	r3, #8
 800122a:	d15c      	bne.n	80012e6 <HAL_RCC_OscConfig+0x10e>
 800122c:	4bb6      	ldr	r3, [pc, #728]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001238:	d155      	bne.n	80012e6 <HAL_RCC_OscConfig+0x10e>
 800123a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800123e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800124e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001252:	fab3 f383 	clz	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	095b      	lsrs	r3, r3, #5
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b01      	cmp	r3, #1
 8001264:	d102      	bne.n	800126c <HAL_RCC_OscConfig+0x94>
 8001266:	4ba8      	ldr	r3, [pc, #672]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	e015      	b.n	8001298 <HAL_RCC_OscConfig+0xc0>
 800126c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001270:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001274:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001284:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001288:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800128c:	fa93 f3a3 	rbit	r3, r3
 8001290:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001294:	4b9c      	ldr	r3, [pc, #624]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800129c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80012a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80012a4:	fa92 f2a2 	rbit	r2, r2
 80012a8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80012ac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80012b0:	fab2 f282 	clz	r2, r2
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	f042 0220 	orr.w	r2, r2, #32
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	f002 021f 	and.w	r2, r2, #31
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f202 	lsl.w	r2, r1, r2
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 811f 	beq.w	800150c <HAL_RCC_OscConfig+0x334>
 80012ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f040 8116 	bne.w	800150c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	f000 bfaf 	b.w	8002244 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f6:	d106      	bne.n	8001306 <HAL_RCC_OscConfig+0x12e>
 80012f8:	4b83      	ldr	r3, [pc, #524]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a82      	ldr	r2, [pc, #520]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80012fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e036      	b.n	8001374 <HAL_RCC_OscConfig+0x19c>
 8001306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800130a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x158>
 8001316:	4b7c      	ldr	r3, [pc, #496]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a7b      	ldr	r2, [pc, #492]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800131c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b79      	ldr	r3, [pc, #484]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a78      	ldr	r2, [pc, #480]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e021      	b.n	8001374 <HAL_RCC_OscConfig+0x19c>
 8001330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x184>
 8001342:	4b71      	ldr	r3, [pc, #452]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a70      	ldr	r2, [pc, #448]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b6e      	ldr	r3, [pc, #440]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6d      	ldr	r2, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0x19c>
 800135c:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a69      	ldr	r2, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a66      	ldr	r2, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001374:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	f023 020f 	bic.w	r2, r3, #15
 800137c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	495f      	ldr	r1, [pc, #380]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800138a:	4313      	orrs	r3, r2
 800138c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800138e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d059      	beq.n	8001452 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7ff fa9f 	bl	80008e0 <HAL_GetTick>
 80013a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	e00a      	b.n	80013be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fa9a 	bl	80008e0 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b64      	cmp	r3, #100	; 0x64
 80013b6:	d902      	bls.n	80013be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	f000 bf43 	b.w	8002244 <HAL_RCC_OscConfig+0x106c>
 80013be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80013d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	095b      	lsrs	r3, r3, #5
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d102      	bne.n	80013f0 <HAL_RCC_OscConfig+0x218>
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	e015      	b.n	800141c <HAL_RCC_OscConfig+0x244>
 80013f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80013fc:	fa93 f3a3 	rbit	r3, r3
 8001400:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001404:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001408:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800140c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001418:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001420:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001424:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001428:	fa92 f2a2 	rbit	r2, r2
 800142c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001430:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001434:	fab2 f282 	clz	r2, r2
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	f042 0220 	orr.w	r2, r2, #32
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	f002 021f 	and.w	r2, r2, #31
 8001444:	2101      	movs	r1, #1
 8001446:	fa01 f202 	lsl.w	r2, r1, r2
 800144a:	4013      	ands	r3, r2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0ab      	beq.n	80013a8 <HAL_RCC_OscConfig+0x1d0>
 8001450:	e05d      	b.n	800150e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fa45 	bl	80008e0 <HAL_GetTick>
 8001456:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fa40 	bl	80008e0 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	; 0x64
 800146a:	d902      	bls.n	8001472 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	f000 bee9 	b.w	8002244 <HAL_RCC_OscConfig+0x106c>
 8001472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001476:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800147e:	fa93 f3a3 	rbit	r3, r3
 8001482:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001486:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	095b      	lsrs	r3, r3, #5
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d102      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2cc>
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	e015      	b.n	80014d0 <HAL_RCC_OscConfig+0x2f8>
 80014a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80014b0:	fa93 f3a3 	rbit	r3, r3
 80014b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80014b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80014c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80014c4:	fa93 f3a3 	rbit	r3, r3
 80014c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014d4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80014d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80014dc:	fa92 f2a2 	rbit	r2, r2
 80014e0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80014e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80014e8:	fab2 f282 	clz	r2, r2
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	f042 0220 	orr.w	r2, r2, #32
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	f002 021f 	and.w	r2, r2, #31
 80014f8:	2101      	movs	r1, #1
 80014fa:	fa01 f202 	lsl.w	r2, r1, r2
 80014fe:	4013      	ands	r3, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1ab      	bne.n	800145c <HAL_RCC_OscConfig+0x284>
 8001504:	e003      	b.n	800150e <HAL_RCC_OscConfig+0x336>
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 817d 	beq.w	800181e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001524:	4ba6      	ldr	r3, [pc, #664]	; (80017c0 <HAL_RCC_OscConfig+0x5e8>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001530:	4ba3      	ldr	r3, [pc, #652]	; (80017c0 <HAL_RCC_OscConfig+0x5e8>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b08      	cmp	r3, #8
 800153a:	d172      	bne.n	8001622 <HAL_RCC_OscConfig+0x44a>
 800153c:	4ba0      	ldr	r3, [pc, #640]	; (80017c0 <HAL_RCC_OscConfig+0x5e8>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d16c      	bne.n	8001622 <HAL_RCC_OscConfig+0x44a>
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800155a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	095b      	lsrs	r3, r3, #5
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d102      	bne.n	8001578 <HAL_RCC_OscConfig+0x3a0>
 8001572:	4b93      	ldr	r3, [pc, #588]	; (80017c0 <HAL_RCC_OscConfig+0x5e8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	e013      	b.n	80015a0 <HAL_RCC_OscConfig+0x3c8>
 8001578:	2302      	movs	r3, #2
 800157a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001590:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800159c:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <HAL_RCC_OscConfig+0x5e8>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	2202      	movs	r2, #2
 80015a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80015a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015aa:	fa92 f2a2 	rbit	r2, r2
 80015ae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80015b2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80015b6:	fab2 f282 	clz	r2, r2
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	f042 0220 	orr.w	r2, r2, #32
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	f002 021f 	and.w	r2, r2, #31
 80015c6:	2101      	movs	r1, #1
 80015c8:	fa01 f202 	lsl.w	r2, r1, r2
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00a      	beq.n	80015e8 <HAL_RCC_OscConfig+0x410>
 80015d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d002      	beq.n	80015e8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f000 be2e 	b.w	8002244 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e8:	4b75      	ldr	r3, [pc, #468]	; (80017c0 <HAL_RCC_OscConfig+0x5e8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	21f8      	movs	r1, #248	; 0xf8
 80015fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001606:	fa91 f1a1 	rbit	r1, r1
 800160a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800160e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001612:	fab1 f181 	clz	r1, r1
 8001616:	b2c9      	uxtb	r1, r1
 8001618:	408b      	lsls	r3, r1
 800161a:	4969      	ldr	r1, [pc, #420]	; (80017c0 <HAL_RCC_OscConfig+0x5e8>)
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001620:	e0fd      	b.n	800181e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8088 	beq.w	8001744 <HAL_RCC_OscConfig+0x56c>
 8001634:	2301      	movs	r3, #1
 8001636:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001646:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	461a      	mov	r2, r3
 800165c:	2301      	movs	r3, #1
 800165e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff f93e 	bl	80008e0 <HAL_GetTick>
 8001664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff f939 	bl	80008e0 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d902      	bls.n	8001680 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	f000 bde2 	b.w	8002244 <HAL_RCC_OscConfig+0x106c>
 8001680:	2302      	movs	r3, #2
 8001682:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001692:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	fab3 f383 	clz	r3, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	095b      	lsrs	r3, r3, #5
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d102      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4d8>
 80016aa:	4b45      	ldr	r3, [pc, #276]	; (80017c0 <HAL_RCC_OscConfig+0x5e8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	e013      	b.n	80016d8 <HAL_RCC_OscConfig+0x500>
 80016b0:	2302      	movs	r3, #2
 80016b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80016ba:	fa93 f3a3 	rbit	r3, r3
 80016be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80016c2:	2302      	movs	r3, #2
 80016c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80016c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80016cc:	fa93 f3a3 	rbit	r3, r3
 80016d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80016d4:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <HAL_RCC_OscConfig+0x5e8>)
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	2202      	movs	r2, #2
 80016da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80016de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80016e2:	fa92 f2a2 	rbit	r2, r2
 80016e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80016ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80016ee:	fab2 f282 	clz	r2, r2
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f042 0220 	orr.w	r2, r2, #32
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	f002 021f 	and.w	r2, r2, #31
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0af      	beq.n	800166a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_RCC_OscConfig+0x5e8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	21f8      	movs	r1, #248	; 0xf8
 8001720:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001728:	fa91 f1a1 	rbit	r1, r1
 800172c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001730:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001734:	fab1 f181 	clz	r1, r1
 8001738:	b2c9      	uxtb	r1, r1
 800173a:	408b      	lsls	r3, r1
 800173c:	4920      	ldr	r1, [pc, #128]	; (80017c0 <HAL_RCC_OscConfig+0x5e8>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
 8001742:	e06c      	b.n	800181e <HAL_RCC_OscConfig+0x646>
 8001744:	2301      	movs	r3, #1
 8001746:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800174e:	fa93 f3a3 	rbit	r3, r3
 8001752:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001756:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001764:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	461a      	mov	r2, r3
 800176c:	2300      	movs	r3, #0
 800176e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff f8b6 	bl	80008e0 <HAL_GetTick>
 8001774:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177a:	f7ff f8b1 	bl	80008e0 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d902      	bls.n	8001790 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	f000 bd5a 	b.w	8002244 <HAL_RCC_OscConfig+0x106c>
 8001790:	2302      	movs	r3, #2
 8001792:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800179a:	fa93 f3a3 	rbit	r3, r3
 800179e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80017a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	fab3 f383 	clz	r3, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	095b      	lsrs	r3, r3, #5
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d104      	bne.n	80017c4 <HAL_RCC_OscConfig+0x5ec>
 80017ba:	4b01      	ldr	r3, [pc, #4]	; (80017c0 <HAL_RCC_OscConfig+0x5e8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e015      	b.n	80017ec <HAL_RCC_OscConfig+0x614>
 80017c0:	40021000 	.word	0x40021000
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80017d6:	2302      	movs	r3, #2
 80017d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80017dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80017e8:	4bc8      	ldr	r3, [pc, #800]	; (8001b0c <HAL_RCC_OscConfig+0x934>)
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	2202      	movs	r2, #2
 80017ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80017f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80017f6:	fa92 f2a2 	rbit	r2, r2
 80017fa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80017fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001802:	fab2 f282 	clz	r2, r2
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	f042 0220 	orr.w	r2, r2, #32
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	f002 021f 	and.w	r2, r2, #31
 8001812:	2101      	movs	r1, #1
 8001814:	fa01 f202 	lsl.w	r2, r1, r2
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ad      	bne.n	800177a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8110 	beq.w	8001a54 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001838:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d079      	beq.n	8001938 <HAL_RCC_OscConfig+0x760>
 8001844:	2301      	movs	r3, #1
 8001846:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	4bab      	ldr	r3, [pc, #684]	; (8001b10 <HAL_RCC_OscConfig+0x938>)
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	461a      	mov	r2, r3
 800186a:	2301      	movs	r3, #1
 800186c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186e:	f7ff f837 	bl	80008e0 <HAL_GetTick>
 8001872:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001876:	e00a      	b.n	800188e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff f832 	bl	80008e0 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d902      	bls.n	800188e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	f000 bcdb 	b.w	8002244 <HAL_RCC_OscConfig+0x106c>
 800188e:	2302      	movs	r3, #2
 8001890:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001894:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018a8:	2202      	movs	r2, #2
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80018cc:	2202      	movs	r2, #2
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	fa93 f2a3 	rbit	r2, r3
 80018de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e8:	4b88      	ldr	r3, [pc, #544]	; (8001b0c <HAL_RCC_OscConfig+0x934>)
 80018ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80018f4:	2102      	movs	r1, #2
 80018f6:	6019      	str	r1, [r3, #0]
 80018f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	fa93 f1a3 	rbit	r1, r3
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800190e:	6019      	str	r1, [r3, #0]
  return result;
 8001910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001914:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	2101      	movs	r1, #1
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0a0      	beq.n	8001878 <HAL_RCC_OscConfig+0x6a0>
 8001936:	e08d      	b.n	8001a54 <HAL_RCC_OscConfig+0x87c>
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001948:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	fa93 f2a3 	rbit	r2, r3
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800195a:	601a      	str	r2, [r3, #0]
  return result;
 800195c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001960:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001964:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	4b68      	ldr	r3, [pc, #416]	; (8001b10 <HAL_RCC_OscConfig+0x938>)
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	461a      	mov	r2, r3
 8001976:	2300      	movs	r3, #0
 8001978:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7fe ffb1 	bl	80008e0 <HAL_GetTick>
 800197e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001982:	e00a      	b.n	800199a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001984:	f7fe ffac 	bl	80008e0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d902      	bls.n	800199a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	f000 bc55 	b.w	8002244 <HAL_RCC_OscConfig+0x106c>
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019a2:	2202      	movs	r2, #2
 80019a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fa93 f2a3 	rbit	r2, r3
 80019b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80019c6:	2202      	movs	r2, #2
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f2a3 	rbit	r2, r3
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80019ea:	2202      	movs	r2, #2
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fa93 f2a3 	rbit	r2, r3
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a06:	4b41      	ldr	r3, [pc, #260]	; (8001b0c <HAL_RCC_OscConfig+0x934>)
 8001a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a12:	2102      	movs	r1, #2
 8001a14:	6019      	str	r1, [r3, #0]
 8001a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	fa93 f1a3 	rbit	r1, r3
 8001a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a28:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a2c:	6019      	str	r1, [r3, #0]
  return result;
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	2101      	movs	r1, #1
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d197      	bne.n	8001984 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 81a1 	beq.w	8001dac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <HAL_RCC_OscConfig+0x934>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d116      	bne.n	8001aaa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <HAL_RCC_OscConfig+0x934>)
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <HAL_RCC_OscConfig+0x934>)
 8001a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a86:	61d3      	str	r3, [r2, #28]
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_RCC_OscConfig+0x934>)
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a94:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001aa2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_RCC_OscConfig+0x93c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d11a      	bne.n	8001aec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_RCC_OscConfig+0x93c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a16      	ldr	r2, [pc, #88]	; (8001b14 <HAL_RCC_OscConfig+0x93c>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac2:	f7fe ff0d 	bl	80008e0 <HAL_GetTick>
 8001ac6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	e009      	b.n	8001ae0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001acc:	f7fe ff08 	bl	80008e0 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	; 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e3b1      	b.n	8002244 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_RCC_OscConfig+0x93c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ef      	beq.n	8001acc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d10d      	bne.n	8001b18 <HAL_RCC_OscConfig+0x940>
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_RCC_OscConfig+0x934>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4a02      	ldr	r2, [pc, #8]	; (8001b0c <HAL_RCC_OscConfig+0x934>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6213      	str	r3, [r2, #32]
 8001b08:	e03c      	b.n	8001b84 <HAL_RCC_OscConfig+0x9ac>
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	10908120 	.word	0x10908120
 8001b14:	40007000 	.word	0x40007000
 8001b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10c      	bne.n	8001b42 <HAL_RCC_OscConfig+0x96a>
 8001b28:	4bc1      	ldr	r3, [pc, #772]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4ac0      	ldr	r2, [pc, #768]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001b2e:	f023 0301 	bic.w	r3, r3, #1
 8001b32:	6213      	str	r3, [r2, #32]
 8001b34:	4bbe      	ldr	r3, [pc, #760]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4abd      	ldr	r2, [pc, #756]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001b3a:	f023 0304 	bic.w	r3, r3, #4
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	e020      	b.n	8001b84 <HAL_RCC_OscConfig+0x9ac>
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x994>
 8001b52:	4bb7      	ldr	r3, [pc, #732]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4ab6      	ldr	r2, [pc, #728]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6213      	str	r3, [r2, #32]
 8001b5e:	4bb4      	ldr	r3, [pc, #720]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4ab3      	ldr	r2, [pc, #716]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6213      	str	r3, [r2, #32]
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0x9ac>
 8001b6c:	4bb0      	ldr	r3, [pc, #704]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4aaf      	ldr	r2, [pc, #700]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	6213      	str	r3, [r2, #32]
 8001b78:	4bad      	ldr	r3, [pc, #692]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4aac      	ldr	r2, [pc, #688]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001b7e:	f023 0304 	bic.w	r3, r3, #4
 8001b82:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 8081 	beq.w	8001c98 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7fe fea3 	bl	80008e0 <HAL_GetTick>
 8001b9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba0:	f7fe fe9e 	bl	80008e0 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e345      	b.n	8002244 <HAL_RCC_OscConfig+0x106c>
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f2a3 	rbit	r2, r3
 8001bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001be4:	2202      	movs	r2, #2
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001bfe:	601a      	str	r2, [r3, #0]
  return result;
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	095b      	lsrs	r3, r3, #5
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d102      	bne.n	8001c24 <HAL_RCC_OscConfig+0xa4c>
 8001c1e:	4b84      	ldr	r3, [pc, #528]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	e013      	b.n	8001c4c <HAL_RCC_OscConfig+0xa74>
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fa93 f2a3 	rbit	r2, r3
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	4b79      	ldr	r3, [pc, #484]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c50:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001c54:	2102      	movs	r1, #2
 8001c56:	6011      	str	r1, [r2, #0]
 8001c58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	fa92 f1a2 	rbit	r1, r2
 8001c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c6a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c6e:	6011      	str	r1, [r2, #0]
  return result;
 8001c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c74:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	fab2 f282 	clz	r2, r2
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f002 021f 	and.w	r2, r2, #31
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d084      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x9c8>
 8001c96:	e07f      	b.n	8001d98 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7fe fe22 	bl	80008e0 <HAL_GetTick>
 8001c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	e00b      	b.n	8001cba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7fe fe1d 	bl	80008e0 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e2c4      	b.n	8002244 <HAL_RCC_OscConfig+0x106c>
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	fa93 f2a3 	rbit	r2, r3
 8001cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d00:	601a      	str	r2, [r3, #0]
  return result;
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_OscConfig+0xb4e>
 8001d20:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	e013      	b.n	8001d4e <HAL_RCC_OscConfig+0xb76>
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d2e:	2202      	movs	r2, #2
 8001d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	4b39      	ldr	r3, [pc, #228]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d52:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001d56:	2102      	movs	r1, #2
 8001d58:	6011      	str	r1, [r2, #0]
 8001d5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d5e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	fa92 f1a2 	rbit	r1, r2
 8001d68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d6c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d70:	6011      	str	r1, [r2, #0]
  return result;
 8001d72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d76:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	fab2 f282 	clz	r2, r2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	f002 021f 	and.w	r2, r2, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d184      	bne.n	8001ca2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d98:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d105      	bne.n	8001dac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da0:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001daa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8242 	beq.w	8002242 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_RCC_OscConfig+0xc58>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	f000 8213 	beq.w	80021f2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	f040 8162 	bne.w	80020a2 <HAL_RCC_OscConfig+0xeca>
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001de6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	fa93 f2a3 	rbit	r2, r3
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e02:	601a      	str	r2, [r3, #0]
  return result;
 8001e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e08:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e0c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2300      	movs	r3, #0
 8001e22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7fe fd5c 	bl	80008e0 <HAL_GetTick>
 8001e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2c:	e00c      	b.n	8001e48 <HAL_RCC_OscConfig+0xc70>
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e34:	f7fe fd54 	bl	80008e0 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e1fd      	b.n	8002244 <HAL_RCC_OscConfig+0x106c>
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	fa93 f2a3 	rbit	r2, r3
 8001e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e68:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e6c:	601a      	str	r2, [r3, #0]
  return result;
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d102      	bne.n	8001e92 <HAL_RCC_OscConfig+0xcba>
 8001e8c:	4bb0      	ldr	r3, [pc, #704]	; (8002150 <HAL_RCC_OscConfig+0xf78>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	e027      	b.n	8001ee2 <HAL_RCC_OscConfig+0xd0a>
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ec0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	4b9c      	ldr	r3, [pc, #624]	; (8002150 <HAL_RCC_OscConfig+0xf78>)
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ee6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001eea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eee:	6011      	str	r1, [r2, #0]
 8001ef0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ef4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	fa92 f1a2 	rbit	r1, r2
 8001efe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f02:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f06:	6011      	str	r1, [r2, #0]
  return result;
 8001f08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f0c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	fab2 f282 	clz	r2, r2
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	f042 0220 	orr.w	r2, r2, #32
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f002 021f 	and.w	r2, r2, #31
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f202 	lsl.w	r2, r1, r2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d182      	bne.n	8001e34 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2e:	4b88      	ldr	r3, [pc, #544]	; (8002150 <HAL_RCC_OscConfig+0xf78>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	497f      	ldr	r1, [pc, #508]	; (8002150 <HAL_RCC_OscConfig+0xf78>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	604b      	str	r3, [r1, #4]
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001f5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fa93 f2a3 	rbit	r2, r3
 8001f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f76:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f7a:	601a      	str	r2, [r3, #0]
  return result;
 8001f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f80:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f84:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	461a      	mov	r2, r3
 8001f98:	2301      	movs	r3, #1
 8001f9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fca0 	bl	80008e0 <HAL_GetTick>
 8001fa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa4:	e009      	b.n	8001fba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7fe fc9b 	bl	80008e0 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e144      	b.n	8002244 <HAL_RCC_OscConfig+0x106c>
 8001fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fcc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	fa93 f2a3 	rbit	r2, r3
 8001fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fda:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001fde:	601a      	str	r2, [r3, #0]
  return result;
 8001fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001fe8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d102      	bne.n	8002004 <HAL_RCC_OscConfig+0xe2c>
 8001ffe:	4b54      	ldr	r3, [pc, #336]	; (8002150 <HAL_RCC_OscConfig+0xf78>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	e027      	b.n	8002054 <HAL_RCC_OscConfig+0xe7c>
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800200c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fa93 f2a3 	rbit	r2, r3
 8002020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002024:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002032:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	fa93 f2a3 	rbit	r2, r3
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	4b3f      	ldr	r3, [pc, #252]	; (8002150 <HAL_RCC_OscConfig+0xf78>)
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002058:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800205c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002060:	6011      	str	r1, [r2, #0]
 8002062:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002066:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	fa92 f1a2 	rbit	r1, r2
 8002070:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002074:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002078:	6011      	str	r1, [r2, #0]
  return result;
 800207a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800207e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	f042 0220 	orr.w	r2, r2, #32
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f002 021f 	and.w	r2, r2, #31
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d082      	beq.n	8001fa6 <HAL_RCC_OscConfig+0xdce>
 80020a0:	e0cf      	b.n	8002242 <HAL_RCC_OscConfig+0x106a>
 80020a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80020aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	fa93 f2a3 	rbit	r2, r3
 80020be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80020c6:	601a      	str	r2, [r3, #0]
  return result;
 80020c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80020d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	461a      	mov	r2, r3
 80020e4:	2300      	movs	r3, #0
 80020e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7fe fbfa 	bl	80008e0 <HAL_GetTick>
 80020ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f0:	e009      	b.n	8002106 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f2:	f7fe fbf5 	bl	80008e0 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e09e      	b.n	8002244 <HAL_RCC_OscConfig+0x106c>
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800210e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002118:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	fa93 f2a3 	rbit	r2, r3
 8002122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002126:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800212a:	601a      	str	r2, [r3, #0]
  return result;
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002134:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d104      	bne.n	8002154 <HAL_RCC_OscConfig+0xf7c>
 800214a:	4b01      	ldr	r3, [pc, #4]	; (8002150 <HAL_RCC_OscConfig+0xf78>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	e029      	b.n	80021a4 <HAL_RCC_OscConfig+0xfcc>
 8002150:	40021000 	.word	0x40021000
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800215c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	fa93 f2a3 	rbit	r2, r3
 8002170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002174:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa93 f2a3 	rbit	r2, r3
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_RCC_OscConfig+0x1078>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021a8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80021ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021b0:	6011      	str	r1, [r2, #0]
 80021b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021b6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	fa92 f1a2 	rbit	r1, r2
 80021c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80021c8:	6011      	str	r1, [r2, #0]
  return result;
 80021ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f042 0220 	orr.w	r2, r2, #32
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f002 021f 	and.w	r2, r2, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d180      	bne.n	80020f2 <HAL_RCC_OscConfig+0xf1a>
 80021f0:	e027      	b.n	8002242 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e01e      	b.n	8002244 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_RCC_OscConfig+0x1078>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800220e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002212:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	429a      	cmp	r2, r3
 8002224:	d10b      	bne.n	800223e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002226:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800222a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800223a:	429a      	cmp	r2, r3
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000

08002254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b09e      	sub	sp, #120	; 0x78
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e162      	b.n	8002532 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800226c:	4b90      	ldr	r3, [pc, #576]	; (80024b0 <HAL_RCC_ClockConfig+0x25c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d910      	bls.n	800229c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b8d      	ldr	r3, [pc, #564]	; (80024b0 <HAL_RCC_ClockConfig+0x25c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 0207 	bic.w	r2, r3, #7
 8002282:	498b      	ldr	r1, [pc, #556]	; (80024b0 <HAL_RCC_ClockConfig+0x25c>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <HAL_RCC_ClockConfig+0x25c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e14a      	b.n	8002532 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b82      	ldr	r3, [pc, #520]	; (80024b4 <HAL_RCC_ClockConfig+0x260>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	497f      	ldr	r1, [pc, #508]	; (80024b4 <HAL_RCC_ClockConfig+0x260>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80dc 	beq.w	8002480 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d13c      	bne.n	800234a <HAL_RCC_ClockConfig+0xf6>
 80022d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80022de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d102      	bne.n	80022fa <HAL_RCC_ClockConfig+0xa6>
 80022f4:	4b6f      	ldr	r3, [pc, #444]	; (80024b4 <HAL_RCC_ClockConfig+0x260>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	e00f      	b.n	800231a <HAL_RCC_ClockConfig+0xc6>
 80022fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	667b      	str	r3, [r7, #100]	; 0x64
 8002308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800230c:	663b      	str	r3, [r7, #96]	; 0x60
 800230e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002316:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <HAL_RCC_ClockConfig+0x260>)
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800231e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002320:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002322:	fa92 f2a2 	rbit	r2, r2
 8002326:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002328:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800232a:	fab2 f282 	clz	r2, r2
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	f042 0220 	orr.w	r2, r2, #32
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	f002 021f 	and.w	r2, r2, #31
 800233a:	2101      	movs	r1, #1
 800233c:	fa01 f202 	lsl.w	r2, r1, r2
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d17b      	bne.n	800243e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0f3      	b.n	8002532 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d13c      	bne.n	80023cc <HAL_RCC_ClockConfig+0x178>
 8002352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002356:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_RCC_ClockConfig+0x128>
 8002376:	4b4f      	ldr	r3, [pc, #316]	; (80024b4 <HAL_RCC_ClockConfig+0x260>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	e00f      	b.n	800239c <HAL_RCC_ClockConfig+0x148>
 800237c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002380:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	647b      	str	r3, [r7, #68]	; 0x44
 800238a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800238e:	643b      	str	r3, [r7, #64]	; 0x40
 8002390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002398:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <HAL_RCC_ClockConfig+0x260>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80023a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023a4:	fa92 f2a2 	rbit	r2, r2
 80023a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023ac:	fab2 f282 	clz	r2, r2
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	f042 0220 	orr.w	r2, r2, #32
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	f002 021f 	and.w	r2, r2, #31
 80023bc:	2101      	movs	r1, #1
 80023be:	fa01 f202 	lsl.w	r2, r1, r2
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d13a      	bne.n	800243e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0b2      	b.n	8002532 <HAL_RCC_ClockConfig+0x2de>
 80023cc:	2302      	movs	r3, #2
 80023ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d102      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x1a0>
 80023ee:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_RCC_ClockConfig+0x260>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	e00d      	b.n	8002410 <HAL_RCC_ClockConfig+0x1bc>
 80023f4:	2302      	movs	r3, #2
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002400:	2302      	movs	r3, #2
 8002402:	623b      	str	r3, [r7, #32]
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <HAL_RCC_ClockConfig+0x260>)
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	2202      	movs	r2, #2
 8002412:	61ba      	str	r2, [r7, #24]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	fa92 f2a2 	rbit	r2, r2
 800241a:	617a      	str	r2, [r7, #20]
  return result;
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	fab2 f282 	clz	r2, r2
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	f042 0220 	orr.w	r2, r2, #32
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	f002 021f 	and.w	r2, r2, #31
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e079      	b.n	8002532 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_ClockConfig+0x260>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	491a      	ldr	r1, [pc, #104]	; (80024b4 <HAL_RCC_ClockConfig+0x260>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002450:	f7fe fa46 	bl	80008e0 <HAL_GetTick>
 8002454:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7fe fa42 	bl	80008e0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e061      	b.n	8002532 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <HAL_RCC_ClockConfig+0x260>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 020c 	and.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	429a      	cmp	r2, r3
 800247e:	d1eb      	bne.n	8002458 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_ClockConfig+0x25c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d214      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_RCC_ClockConfig+0x25c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0207 	bic.w	r2, r3, #7
 8002496:	4906      	ldr	r1, [pc, #24]	; (80024b0 <HAL_RCC_ClockConfig+0x25c>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <HAL_RCC_ClockConfig+0x25c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e040      	b.n	8002532 <HAL_RCC_ClockConfig+0x2de>
 80024b0:	40022000 	.word	0x40022000
 80024b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <HAL_RCC_ClockConfig+0x2e8>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	491a      	ldr	r1, [pc, #104]	; (800253c <HAL_RCC_ClockConfig+0x2e8>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <HAL_RCC_ClockConfig+0x2e8>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4912      	ldr	r1, [pc, #72]	; (800253c <HAL_RCC_ClockConfig+0x2e8>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024f6:	f000 f829 	bl	800254c <HAL_RCC_GetSysClockFreq>
 80024fa:	4601      	mov	r1, r0
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_RCC_ClockConfig+0x2e8>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002504:	22f0      	movs	r2, #240	; 0xf0
 8002506:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	fa92 f2a2 	rbit	r2, r2
 800250e:	60fa      	str	r2, [r7, #12]
  return result;
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	fab2 f282 	clz	r2, r2
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	40d3      	lsrs	r3, r2
 800251a:	4a09      	ldr	r2, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x2ec>)
 800251c:	5cd3      	ldrb	r3, [r2, r3]
 800251e:	fa21 f303 	lsr.w	r3, r1, r3
 8002522:	4a08      	ldr	r2, [pc, #32]	; (8002544 <HAL_RCC_ClockConfig+0x2f0>)
 8002524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_RCC_ClockConfig+0x2f4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f994 	bl	8000858 <HAL_InitTick>
  
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3778      	adds	r7, #120	; 0x78
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	08002bc0 	.word	0x08002bc0
 8002544:	20000000 	.word	0x20000000
 8002548:	20000004 	.word	0x20000004

0800254c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	b08b      	sub	sp, #44	; 0x2c
 8002550:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002566:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d002      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x30>
 8002576:	2b08      	cmp	r3, #8
 8002578:	d003      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x36>
 800257a:	e03c      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800257c:	4b24      	ldr	r3, [pc, #144]	; (8002610 <HAL_RCC_GetSysClockFreq+0xc4>)
 800257e:	623b      	str	r3, [r7, #32]
      break;
 8002580:	e03c      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002588:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800258c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	fa92 f2a2 	rbit	r2, r2
 8002594:	607a      	str	r2, [r7, #4]
  return result;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	fab2 f282 	clz	r2, r2
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	40d3      	lsrs	r3, r2
 80025a0:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	220f      	movs	r2, #15
 80025b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	fa92 f2a2 	rbit	r2, r2
 80025b8:	60fa      	str	r2, [r7, #12]
  return result;
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	fab2 f282 	clz	r2, r2
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	40d3      	lsrs	r3, r2
 80025c4:	4a14      	ldr	r2, [pc, #80]	; (8002618 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025d4:	4a0e      	ldr	r2, [pc, #56]	; (8002610 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
 80025e4:	e004      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	4a0c      	ldr	r2, [pc, #48]	; (800261c <HAL_RCC_GetSysClockFreq+0xd0>)
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	623b      	str	r3, [r7, #32]
      break;
 80025f4:	e002      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025f8:	623b      	str	r3, [r7, #32]
      break;
 80025fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025fc:	6a3b      	ldr	r3, [r7, #32]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	372c      	adds	r7, #44	; 0x2c
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	007a1200 	.word	0x007a1200
 8002614:	08002bd0 	.word	0x08002bd0
 8002618:	08002be0 	.word	0x08002be0
 800261c:	003d0900 	.word	0x003d0900

08002620 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b092      	sub	sp, #72	; 0x48
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002630:	2300      	movs	r3, #0
 8002632:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80d4 	beq.w	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002644:	4b4e      	ldr	r3, [pc, #312]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10e      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002650:	4b4b      	ldr	r3, [pc, #300]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	4a4a      	ldr	r2, [pc, #296]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265a:	61d3      	str	r3, [r2, #28]
 800265c:	4b48      	ldr	r3, [pc, #288]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002668:	2301      	movs	r3, #1
 800266a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	4b45      	ldr	r3, [pc, #276]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d118      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267a:	4b42      	ldr	r3, [pc, #264]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a41      	ldr	r2, [pc, #260]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002684:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002686:	f7fe f92b 	bl	80008e0 <HAL_GetTick>
 800268a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268c:	e008      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268e:	f7fe f927 	bl	80008e0 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b64      	cmp	r3, #100	; 0x64
 800269a:	d901      	bls.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e169      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026ac:	4b34      	ldr	r3, [pc, #208]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8084 	beq.w	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d07c      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026cc:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	461a      	mov	r2, r3
 80026f6:	2301      	movs	r3, #1
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	461a      	mov	r2, r3
 800271a:	2300      	movs	r3, #0
 800271c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800271e:	4a18      	ldr	r2, [pc, #96]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002722:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d04b      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7fe f8d7 	bl	80008e0 <HAL_GetTick>
 8002732:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7fe f8d3 	bl	80008e0 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e113      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800274c:	2302      	movs	r3, #2
 800274e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
 8002758:	2302      	movs	r3, #2
 800275a:	623b      	str	r3, [r7, #32]
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	61fb      	str	r3, [r7, #28]
  return result;
 8002764:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d108      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800277a:	4b01      	ldr	r3, [pc, #4]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	e00d      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
 8002788:	10908100 	.word	0x10908100
 800278c:	2302      	movs	r3, #2
 800278e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	4b78      	ldr	r3, [pc, #480]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	2202      	movs	r2, #2
 800279e:	613a      	str	r2, [r7, #16]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	fa92 f2a2 	rbit	r2, r2
 80027a6:	60fa      	str	r2, [r7, #12]
  return result;
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	fab2 f282 	clz	r2, r2
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	f002 021f 	and.w	r2, r2, #31
 80027ba:	2101      	movs	r1, #1
 80027bc:	fa01 f202 	lsl.w	r2, r1, r2
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0b7      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80027c6:	4b6d      	ldr	r3, [pc, #436]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	496a      	ldr	r1, [pc, #424]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e0:	4b66      	ldr	r3, [pc, #408]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	4a65      	ldr	r2, [pc, #404]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027f8:	4b60      	ldr	r3, [pc, #384]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	f023 0203 	bic.w	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	495d      	ldr	r1, [pc, #372]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002806:	4313      	orrs	r3, r2
 8002808:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002816:	4b59      	ldr	r3, [pc, #356]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4956      	ldr	r1, [pc, #344]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002824:	4313      	orrs	r3, r2
 8002826:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002834:	4b51      	ldr	r3, [pc, #324]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	494e      	ldr	r1, [pc, #312]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002842:	4313      	orrs	r3, r2
 8002844:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002852:	4b4a      	ldr	r3, [pc, #296]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f023 0210 	bic.w	r2, r3, #16
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4947      	ldr	r1, [pc, #284]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002860:	4313      	orrs	r3, r2
 8002862:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002870:	4b42      	ldr	r3, [pc, #264]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	493f      	ldr	r1, [pc, #252]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800287e:	4313      	orrs	r3, r2
 8002880:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800288e:	4b3b      	ldr	r3, [pc, #236]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f023 0220 	bic.w	r2, r3, #32
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4938      	ldr	r1, [pc, #224]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800289c:	4313      	orrs	r3, r2
 800289e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028ac:	4b33      	ldr	r3, [pc, #204]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	4930      	ldr	r1, [pc, #192]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ca:	4b2c      	ldr	r3, [pc, #176]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	4929      	ldr	r1, [pc, #164]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028e8:	4b24      	ldr	r3, [pc, #144]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	4921      	ldr	r1, [pc, #132]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	491a      	ldr	r1, [pc, #104]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002914:	4313      	orrs	r3, r2
 8002916:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002924:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	4912      	ldr	r1, [pc, #72]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002932:	4313      	orrs	r3, r2
 8002934:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	490b      	ldr	r1, [pc, #44]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002950:	4313      	orrs	r3, r2
 8002952:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296c:	4903      	ldr	r1, [pc, #12]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800296e:	4313      	orrs	r3, r2
 8002970:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3748      	adds	r7, #72	; 0x48
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e09d      	b.n	8002ace <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	2b00      	cmp	r3, #0
 8002998:	d108      	bne.n	80029ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029a2:	d009      	beq.n	80029b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
 80029aa:	e005      	b.n	80029b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fd fe3e 	bl	8000654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029f8:	d902      	bls.n	8002a00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	e002      	b.n	8002a06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a0e:	d007      	beq.n	8002a20 <HAL_SPI_Init+0xa0>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a18:	d002      	beq.n	8002a20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	ea42 0103 	orr.w	r1, r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	0c1b      	lsrs	r3, r3, #16
 8002a7c:	f003 0204 	and.w	r2, r3, #4
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a9c:	ea42 0103 	orr.w	r1, r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002abc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ade:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002ae2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	4013      	ands	r3, r2
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	f107 0014 	add.w	r0, r7, #20
 8002b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	b004      	add	sp, #16
 8002b4c:	4770      	bx	lr

08002b4e <memset>:
 8002b4e:	4402      	add	r2, r0
 8002b50:	4603      	mov	r3, r0
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d100      	bne.n	8002b58 <memset+0xa>
 8002b56:	4770      	bx	lr
 8002b58:	f803 1b01 	strb.w	r1, [r3], #1
 8002b5c:	e7f9      	b.n	8002b52 <memset+0x4>
	...

08002b60 <__libc_init_array>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	4d0d      	ldr	r5, [pc, #52]	; (8002b98 <__libc_init_array+0x38>)
 8002b64:	4c0d      	ldr	r4, [pc, #52]	; (8002b9c <__libc_init_array+0x3c>)
 8002b66:	1b64      	subs	r4, r4, r5
 8002b68:	10a4      	asrs	r4, r4, #2
 8002b6a:	2600      	movs	r6, #0
 8002b6c:	42a6      	cmp	r6, r4
 8002b6e:	d109      	bne.n	8002b84 <__libc_init_array+0x24>
 8002b70:	4d0b      	ldr	r5, [pc, #44]	; (8002ba0 <__libc_init_array+0x40>)
 8002b72:	4c0c      	ldr	r4, [pc, #48]	; (8002ba4 <__libc_init_array+0x44>)
 8002b74:	f000 f818 	bl	8002ba8 <_init>
 8002b78:	1b64      	subs	r4, r4, r5
 8002b7a:	10a4      	asrs	r4, r4, #2
 8002b7c:	2600      	movs	r6, #0
 8002b7e:	42a6      	cmp	r6, r4
 8002b80:	d105      	bne.n	8002b8e <__libc_init_array+0x2e>
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
 8002b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b88:	4798      	blx	r3
 8002b8a:	3601      	adds	r6, #1
 8002b8c:	e7ee      	b.n	8002b6c <__libc_init_array+0xc>
 8002b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b92:	4798      	blx	r3
 8002b94:	3601      	adds	r6, #1
 8002b96:	e7f2      	b.n	8002b7e <__libc_init_array+0x1e>
 8002b98:	08002bf0 	.word	0x08002bf0
 8002b9c:	08002bf0 	.word	0x08002bf0
 8002ba0:	08002bf0 	.word	0x08002bf0
 8002ba4:	08002bf4 	.word	0x08002bf4

08002ba8 <_init>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	bf00      	nop
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr

08002bb4 <_fini>:
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb6:	bf00      	nop
 8002bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bba:	bc08      	pop	{r3}
 8002bbc:	469e      	mov	lr, r3
 8002bbe:	4770      	bx	lr
